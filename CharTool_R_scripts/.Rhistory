temp.df = data.frame()
for (i in 1:length(file.list)){ # compile each observation into a single dataframe
temp = get(file.list[i])
temp$Sample = (file.list[i])
temp.df = rbind(temp.df,temp[,c("Sample","Feret")])
assign(paste(sample, 'grain_size', sep = '_'), temp.df)
}
grain.size.merged <- merge(get(paste(sample, 'grain_size', sep = '_')),summ.data,by='Sample')
grain.size.merged = add_row(grain.size.merged, Sample = c("SP_SS_1A_NA1","SP_SS_1A_NA2"), # if needed, add NA rows to deal with missing data
depth_upper_cmbs = c(68,70), depth_lower_cmbs = c(70,72), Probe = c("1A","1A" ))
grain.size.data = grain.size.merged %>%dplyr::group_by(Sample,depth_upper_cmbs, depth_lower_cmbs) %>% # combine and summarize grain size for each sample
dplyr::summarise(Feret_mean = mean(Feret))
grain.size.data = grain.size.data[order(grain.size.data$depth_upper_cmbs),] # sort to make sure that everyting is still depth oriented
# Load magnetic suceptibility data (if available)
#sm = read.csv('...')
# 3. Create Graphs ##############################################################################################
# Individual graphs of the components of the overall figure. These may be left on or commented out depending on the
# needs of a figure. Note that this is not an exhaustive list of all the variable and additional graphs may be
# added by the user. These individual graphs will be compiled together to craete a final figure using the cowplot package.
# Graph elements (title, ages, depth, etc.) graphs
# Title
title = ggplot(data=summ.data) +ggtitle("Son Servera: Probe 1A") + theme_void() + theme(plot.title = element_text(size = 20, hjust = 0.5))
# Ages (if available)
# ages = ggplot(data=summ.data, aes(((depth_upper_age+depth_lower_age)/2), y=Count)) +
#   geom_blank() +
#   theme_bw() +
#   ylab(NULL) +
#   xlab("Depth (cm)\n") +
#   scale_x_reverse() +
#   theme(text = element_text(size=10),
#         axis.line.y=element_line(),
#         axis.text.x=element_text(color = "white"),
#         axis.ticks.x=element_line(color = "white"),
#         panel.border=element_blank(),
#         panel.grid.major=element_blank(),
#         panel.grid.minor=element_blank(),
#         legend.position = "none") +
#   coord_flip()
# Depth
depth = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=Count)) +
geom_blank() +
theme_bw() +
ylab(NULL) +
xlab("\nDepth (cm)") +
scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
theme(text = element_text(size=10),
axis.line.y=element_line(),
axis.text.x=element_text(color = "white"),
axis.ticks.x=element_line(color = "white"),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.position = "none") +
coord_flip()
# Charcoal Metrics (Count/vol, area/vol, feret length, assemblage skewness, Aspect Ratio, etc.)
# Count
# Note: if summ.data contains missing values or gaps, use geom_bar or Geom_ribbon options below to visualize gaps in data
freq = ggplot(data=summ.data, aes(x = (depth_upper_cmbs+depth_lower_cmbs)/2, y=Count/Sample_vol_mL)) +
#geom_area() +
geom_ribbon(aes(ymax = summ.data$Count/Sample_vol_mL, ymin = 0 ))+
#geom_bar(stat="identity") + # optional bar plot
theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
ylab(expression(atop(paste("Charcoal Conc."), paste("(Fragments"," ", cm^-3,")")))) +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) + coord_flip()
# Area
# Note: if summ.data contains missing values or gaps, use geom_bar or Geom_ribbon options below to visualize gaps in data
area = ggplot(data=summ.data, aes(x=(depth_upper_cmbs+depth_lower_cmbs)/2, y=Area_Sum/Sample_vol_mL)) +
#geom_area() +
geom_ribbon(aes(ymax = summ.data$Area_Sum/Sample_vol_mL, ymin = 0 ))+
#geom_bar(stat="identity") + # optional bar plot
theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
ylab(expression(atop(paste("Charcoal Conc."), paste("(", mm^2, " ", cm^-3,")")))) +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
coord_flip()
# Feret length
feret = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y = Dia_avg)) +
geom_point() + theme_bw() +
geom_linerange(ymin=summ.data$Dia_min,ymax=summ.data$Dia_max)+
theme(text = element_text(size=10), axis.text.y=element_blank(),axis.ticks.y=element_blank()) +
ylab("\nFragment Length\n\n(mm)\n") + ylim(min(summ.data$Dia_min, na.rm = T)-.1, max(summ.data$Dia_max, na.rm = T)+.1) +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) + coord_flip()
# Assemblage Skewness
skew = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=Skewness)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab("\nArea\n\nSkewness\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  + coord_flip()
# Aspect Ratio
AR = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$AR)) +
geom_line(color = "grey50") +
theme_bw() +
theme(text = element_text(size=10), axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab("\nAspect Ratio\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  + coord_flip()
# Roundness
round =  ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Round)) +
geom_line(color = "grey50") +
theme_bw() +
theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ylab("\nRoundness\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  +
scale_y_continuous(breaks = seq(0.55,0.75, by =0.1)) +
coord_flip()
# Solidity
solid =  ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Solidity)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab("\nSolidity\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
scale_y_continuous(breaks = seq(0.8,0.9, by =0.04)) +
coord_flip()
# Rectangularity
rect = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Rect)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(),axis.ticks.y=element_blank()) +
ylab("\nRectangularity\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  + coord_flip()
# Circularity
circ = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Circ)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ylab("\nCircularity\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  +
scale_y_continuous(breaks = seq(0.4,0.8, by =0.1)) +
coord_flip()
# Other Datasets (If available)
# Soil color
col = ggplot(color, aes(x = depth, y = y)) +
geom_raster(aes(fill = hex_factor), hjust = 0) +
scale_fill_manual(values = color$hex)+
ylab("\nRGB\n\nColor\n") +
xlab(NULL) +
scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
scale_y_continuous(breaks = c(0,1,2)) +
theme_bw()+ theme(text = element_text(size=10),
#axis.text.x=element_text(color = "white"),
#axis.ticks.x=element_line(color = "white"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none") +
coord_flip()
# Mean Sediment Grain Size
gs = ggplot(data=grain.size.data, aes((x =(depth_upper_cmbs+depth_lower_cmbs)/2), y=Feret_mean/1000)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ylab("\nMean Sediment Grain\n\nDiameter (mm)\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  +
scale_y_continuous(breaks = seq(.2,.42, by =0.1)) +
coord_flip()
# Soil Magnetism (if available)
# sm.lf = ggplot(data=sm, aes(x = (top_depth_cm+bottom_depth_cm)/2, y=Xlf)) +
#   geom_line() + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
#   ylab(expression(atop(paste("Xlf (SI)"), paste("")))) +
#   xlab(NULL) +  scale_x_reverse() + coord_flip()
#
# sm.hf = ggplot(data=sm, aes(x = (top_depth_cm+bottom_depth_cm)/2, y=Xhf)) +
#   geom_line() + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
#   ylab(expression(atop(paste("Xhf (SI)"), paste("")))) +
#   xlab(NULL) +  scale_x_reverse() + coord_flip()
# Create Final Plot using cowplot::plot_grid
#final plot without title
p = plot_grid(depth, freq, area, feret, skew, AR, round, solid, rect, circ,gs, col, ncol =12, align="h", axis = 'l',rel_widths  = c(.4,1,1,1,1,1,1,1,1,1,1,.3))
# Final plot with title (if needed)
p.t  = plot_grid(title, p,   ncol = 1, rel_heights = c(0.05, 1))
# Display plot
p.t
# 4. Export data and graphs ##############################################################################################
# 4.1 Export Data
write.csv(summ.data, file = "./Compiled_Data/Son_Servera_Demo_Summarized.csv")
write.csv(Son_Servera_complete, file = "./Compiled_Data/Son_Servera_Demo_individual.csv")
# 4.2 Export Figure as 14in x 8in jpeg
jpeg("./Figures/Son_Servera_demo_plot.jpeg", width = 16, height = 10, units = 'in', res = 300)
p.t
dev.off()
# 5. Format data for the Global PaleoFire Database (paleofire.org) #######################################################
# 5.1 Format data to include depth, age, sample volume, and charcaol metrics
# Specify each column
depth.up = summ.data$depth_upper_cmbs
depth.down = summ.data$depth_lower_cmbs
age.up = NA #Include ages for each interval if age-depth model is present
age.down = NA #Include ages for each interval if age-depth model is present
vol = Sample_vol_mL
char.quant = summ.data$Count # user determines if count or area of charcoal fragemnts are required
# 5.2 Combine into dataframe and set column names
gcdb.formatted = data.frame(cbind(depth.up,depth.down,age.up, age.down, vol, char.quant))
colnames(gcdb.formatted) = c("DEPTH UP (cm)",	"DEPTH DOWN (cm)",	"AGE UP (cal BP)",	"AGE DOWN (cal BP)",	"VOLUME (cm³)",	"CHARCOAL QUANTITY")
# 5.3 Export dataframe to .csv
write.csv(gcdb.formatted, file = "./Compiled_Data/Son_Servera_Demo_gcdb_formatted.csv")
# 5.2 Combine into dataframe and set column names
gcdb.formatted = data.frame(cbind(depth.up,depth.down,age.up, age.down, vol, char.quant))
colnames(gcdb.formatted) = c("DEPTH UP (cm)",	"DEPTH DOWN (cm)",	"AGE UP (cal BP)",	"AGE DOWN (cal BP)",	"VOLUME (cm3)",	"CHARCOAL QUANTITY")
# 5.3 Export dataframe to .csv
write.csv(gcdb.formatted, file = "./Compiled_Data/Son_Servera_Demo_gcdb_formatted.csv")
# R Script to Process and Display Charcoal Metrics from CharTool
# See https://github.com/gsnitker/CharTool for more information regarding the use of CharTool.
# Grant Snitker
# grant.snitker@uga.edu
# University of Georgia
# Feb.11.2021
# User Notes:
# Script developed for R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
# The versions of each R package used in this script are notated below in "1. Set-up"
# This R script is intended to be used in conjunction with the RStudio Project "CharTool_R_scripts.Rproj", which is included on https://github.com/gsnitker/CharTool.
# For more information on using Rstudio projects, please see https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects. While a user can alter the code
# below to point to the directories of their choice, the default directory configuration is relies on the named folders associated with this zipped file.
# The following folders must be present within the "Analysis" folder. Please note that the folder names must be label verbatim as they appear here"
# Raw_Data - Place the raw, labeled CharTool output csv files in this folder
# Inventories - Place an inventory of the samples to be analyzed in this folder. Note that the sample IDs or numbers in the inventory must match the corresponding file names for the raw CharTool output .csv files
# Compiled_Data - outputs of the individual observations and summarized dataset will be saved here
# Figures -  all figures will be exported to this folder
# Finally, if using this script, CharTool, or the associated workflow, please credit this work using the following citation:
#
# Snitker, G., 2020. The Charcoal Quantification Tool (CharTool): A Suite of Open-source Tools
# for Quantifying Charcoal Fragments and Sediment Properties in Archaeological and Paleoecological
# Analysis. EBL 11, 103–115. https://doi.org/10.14237/ebl.11.1.2020.1653
# 1. Set-up ##############################################################################################################
# 1.1 Clear workspace, set seed, and set working directory
rm(list = ls())
par(ask=F)
set.seed(6)
setwd("./Analysis") # Change to location where charcoal tables are stored
wd = getwd()
# 1.2 Load required libraries
# If libraries need to be installed, uncomment teh line below:
#install,packages(c(tools, dplyr, moments, caret, cowplot, colorspace, gridExtra, ggpubr, scales, data.table))
library(tools) # version 3.3.2
library(dplyr) # version 0.5.0
library(moments) # version 0.14
library(caret) # version 6.0-78
library(cowplot) # version 0.9.2
library(colorspace) # version 1.3-2
library(scales) # version 0.5.0
library(data.table) # version 1.10.4-3
library(munsell) # version 0.5.0
# 1.3 Select folder with data for analysis from options below:
sample = "Son_Servera"
# 1.4 Load sample inventory and associated information, then set wd
inventory = read.csv(paste("./Inventories/", sample,"_inventory.csv",sep = "")) # load charcoal inventory (developed prior to analysis and includes metadata for sample location)
setwd(paste("./Raw_Data/Charcoal/", sample,sep = ""))
Sample_vol_mL = 5 # volume of sediment sample (cm3)
# 2. Clean and Process Data ######################################################################################################
# 2.1 Import all datafiles from folder
obs.names = list.files(pattern="*.csv")
list2env( # circle through directory and load in each .csv collected by CharTool
lapply(setNames(obs.names, make.names(gsub("*.csv$", "", obs.names))),
read.csv), envir = .GlobalEnv)
obs.list = (noquote(file_path_sans_ext(obs.names)))
setwd(wd)
# 2.2 Compile all charcoal data from column sample
temp.df = data.frame()
for (i in 1:length(obs.list)){ # compile charcoal stats
temp = get(obs.list[i])
temp$Sample = (obs.list[i])
temp.df = rbind(temp.df,temp[,c("Sample","Area","Feret","Perim.","Major","Minor","Width","Height","Min","Max","AR","Circ.","Round","Solidity")])
assign(paste(sample, 'raw', sep = '_'), temp.df)
}
# 2.3 Calculate additional metrics from CharTool output
temp = get(paste(sample,"_raw", sep=""))
temp$Area = temp$Area
temp$PA = temp$Perim. / temp$Area
temp$PMAJ = temp$Perim. / temp$Major
temp$Rect = temp$Area / ((temp$Width * temp$Height))
temp$Ellipse = temp$Perim. / (2 * pi * sqrt(((temp$Major^2) + (temp$Minor))/2))
temp$Struct = (temp$Min + temp$Max) /2 # Average
temp.selected = temp[,c("Sample","Area","Feret","Perim.","Major","Minor","Width","Height","Min","Max","AR","Circ.","Round","Solidity", "Ellipse","PMAJ","Struct", "PA", "Rect")]
assign(paste(sample, 'all_metrics', sep = '_'), temp.selected) # output all metrics, but without inventory metadata
# 2.4 Merge charcoal data with inventory and create a complete dataframe of all observations
temp.merged <- merge(get(paste(sample, 'all_metrics', sep = '_')),inventory,by='Sample')
assign(paste(sample, 'complete', sep = '_'), temp.merged) # output complete dataframe of all metrics with metadata
# 2.5 add NA rows to accommodate for any gaps or missing depths
# Note: This step is only required if gaps exist in the data collected from the core, soil probe, auger, or sediment column in the field
temp.na.rows = add_row(get(paste(sample,"_complete", sep="")), Sample = c("SP_SS_1A_NA1","SP_SS_1A_NA2"),
depth_upper_cmbs = c(68,70), depth_lower_cmbs = c(70,72), Probe = c("1A","1A" ))
assign(paste(sample, 'complete_NAs', sep = '_'), temp.na.rows)
# 2.6 Create summarized dataset
# Note: Please choose from the following options:
# Option 1: If section 2.5 was run due to the presence of gaps or missing data, use option 1.
summ.data = get(paste(sample, 'complete_NAs', sep = '_')) %>% # only use if NAs are introduced due to sample gaps
# Option 2: If the record is complete/no gaps are present and section 2.5 was not run, use option 2.
#summ.data = get(paste(sample, 'complete', sep = '_')) %>%
# Proceed with the remainder of the code
dplyr::group_by(Sample, depth_upper_cmbs, depth_lower_cmbs) %>%
dplyr::summarise(
Area_Sum = sum(Area),
Area_avg = mean(Area),
Area_min = min(Area),
Area_max =  max(Area),
Dia_avg = mean(Feret)/1000, # convert from µm to mm
Dia_min = min(Feret)/1000, # convert from µm to mm
Dia_max =  max(Feret)/1000, # convert from µm to mm
Count =  (n()/(mean(Interval_cm)/mean(Interval_cm))),
Diameter = mean(Feret),
Rect = mean(Rect),
AR = mean(AR),
Circ = mean(Circ.),
Round = mean(Round),
Solidity = mean(Solidity),
Skewness = skewness(Area),
Probe = unique(Probe),
Sample_vol_mL = mean(Sample_vol_mL)
)
# 2.7 Summarize data by sample
summ.data = subset(summ.data, Probe == "1A") # subset data to a particular probe, core, etc. if necessary
summ.data = summ.data[order(summ.data$depth_upper_cmbs),] # sort to make sure that everyting is still depth oriented
# 2.8 If any other datasets are being used, load/process them here.
# Load soil color data
file.names = list.files(paste(wd, '/Raw_Data/Color/', sample,"/",sep =""),  pattern="*.csv") # get file names
color = read.csv(paste(wd, '/Raw_Data/Color/', sample,"/",file.names, sep ="")) # load soil color .csv file
color$seq = 1:length(color[,1]) # create sequence index for reordering colors in graph
color$y  = 1 # crate dummy y
color$hex = rgb(color$Red, color$Green, color$Blue, maxColorValue = 255) # convert colors to hex codes for display. Other options include munsell colors using the munsell package from CRAN.
depths = subset(summ.data, !is.na(summ.data$Area_Sum) )
color$depth = (depths$depth_upper_cmbs + depths$depth_lower_cmbs) / 2
color$hex_factor = factor(color$hex, levels=(color$hex)[order(color$seq)]) # order the colors so they display correctly
color$munsell = rgb2mnsl(R = (color$Red)/255 ,B = (color$Blue)/255, G = (color$Green)/255)# create munsell color
color = color[-nrow(color),]  # to make the colors match up with the other data. Note that the last color observation is lost
# Load  and process grain size data
setwd(paste(wd, '/Raw_Data/Grain_size/', sample,"/", sep =""))
file.names = list.files(pattern="*.csv") # get file names
list2env( # circle through directory and load in each .csv collected by CharTool
lapply(setNames(file.names, make.names(gsub("*.csv$", "", file.names))),
read.csv), envir = .GlobalEnv)
file.list = (noquote(file_path_sans_ext(file.names)))
setwd(wd)
temp.df = data.frame()
for (i in 1:length(file.list)){ # compile each observation into a single dataframe
temp = get(file.list[i])
temp$Sample = (file.list[i])
temp.df = rbind(temp.df,temp[,c("Sample","Feret")])
assign(paste(sample, 'grain_size', sep = '_'), temp.df)
}
grain.size.merged <- merge(get(paste(sample, 'grain_size', sep = '_')),summ.data,by='Sample')
grain.size.merged = add_row(grain.size.merged, Sample = c("SP_SS_1A_NA1","SP_SS_1A_NA2"), # if needed, add NA rows to deal with missing data
depth_upper_cmbs = c(68,70), depth_lower_cmbs = c(70,72), Probe = c("1A","1A" ))
grain.size.data = grain.size.merged %>%dplyr::group_by(Sample,depth_upper_cmbs, depth_lower_cmbs) %>% # combine and summarize grain size for each sample
dplyr::summarise(Feret_mean = mean(Feret))
grain.size.data = grain.size.data[order(grain.size.data$depth_upper_cmbs),] # sort to make sure that everyting is still depth oriented
# Load magnetic suceptibility data (if available)
#sm = read.csv('...')
# 3. Create Graphs ##############################################################################################
# Individual graphs of the components of the overall figure. These may be left on or commented out depending on the
# needs of a figure. Note that this is not an exhaustive list of all the variable and additional graphs may be
# added by the user. These individual graphs will be compiled together to craete a final figure using the cowplot package.
# Graph elements (title, ages, depth, etc.) graphs
# Title
title = ggplot(data=summ.data) +ggtitle("Son Servera: Probe 1A") + theme_void() + theme(plot.title = element_text(size = 20, hjust = 0.5))
# Ages (if available)
# ages = ggplot(data=summ.data, aes(((depth_upper_age+depth_lower_age)/2), y=Count)) +
#   geom_blank() +
#   theme_bw() +
#   ylab(NULL) +
#   xlab("Depth (cm)\n") +
#   scale_x_reverse() +
#   theme(text = element_text(size=10),
#         axis.line.y=element_line(),
#         axis.text.x=element_text(color = "white"),
#         axis.ticks.x=element_line(color = "white"),
#         panel.border=element_blank(),
#         panel.grid.major=element_blank(),
#         panel.grid.minor=element_blank(),
#         legend.position = "none") +
#   coord_flip()
# Depth
depth = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=Count)) +
geom_blank() +
theme_bw() +
ylab(NULL) +
xlab("\nDepth (cm)") +
scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
theme(text = element_text(size=10),
axis.line.y=element_line(),
axis.text.x=element_text(color = "white"),
axis.ticks.x=element_line(color = "white"),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
legend.position = "none") +
coord_flip()
# Charcoal Metrics (Count/vol, area/vol, feret length, assemblage skewness, Aspect Ratio, etc.)
# Count
# Note: if summ.data contains missing values or gaps, use geom_bar or Geom_ribbon options below to visualize gaps in data
freq = ggplot(data=summ.data, aes(x = (depth_upper_cmbs+depth_lower_cmbs)/2, y=Count/Sample_vol_mL)) +
#geom_area() +
geom_ribbon(aes(ymax = summ.data$Count/Sample_vol_mL, ymin = 0 ))+
#geom_bar(stat="identity") + # optional bar plot
theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
ylab(expression(atop(paste("Charcoal Conc."), paste("(Fragments"," ", cm^-3,")")))) +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) + coord_flip()
# Area
# Note: if summ.data contains missing values or gaps, use geom_bar or Geom_ribbon options below to visualize gaps in data
area = ggplot(data=summ.data, aes(x=(depth_upper_cmbs+depth_lower_cmbs)/2, y=Area_Sum/Sample_vol_mL)) +
#geom_area() +
geom_ribbon(aes(ymax = summ.data$Area_Sum/Sample_vol_mL, ymin = 0 ))+
#geom_bar(stat="identity") + # optional bar plot
theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
ylab(expression(atop(paste("Charcoal Conc."), paste("(", mm^2, " ", cm^-3,")")))) +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
coord_flip()
# Feret length
feret = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y = Dia_avg)) +
geom_point() + theme_bw() +
geom_linerange(ymin=summ.data$Dia_min,ymax=summ.data$Dia_max)+
theme(text = element_text(size=10), axis.text.y=element_blank(),axis.ticks.y=element_blank()) +
ylab("\nFragment Length\n\n(mm)\n") + ylim(min(summ.data$Dia_min, na.rm = T)-.1, max(summ.data$Dia_max, na.rm = T)+.1) +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) + coord_flip()
# Assemblage Skewness
skew = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=Skewness)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab("\nArea\n\nSkewness\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  + coord_flip()
# Aspect Ratio
AR = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$AR)) +
geom_line(color = "grey50") +
theme_bw() +
theme(text = element_text(size=10), axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab("\nAspect Ratio\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  + coord_flip()
# Roundness
round =  ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Round)) +
geom_line(color = "grey50") +
theme_bw() +
theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ylab("\nRoundness\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  +
scale_y_continuous(breaks = seq(0.55,0.75, by =0.1)) +
coord_flip()
# Solidity
solid =  ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Solidity)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ylab("\nSolidity\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
scale_y_continuous(breaks = seq(0.8,0.9, by =0.04)) +
coord_flip()
# Rectangularity
rect = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Rect)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(),axis.ticks.y=element_blank()) +
ylab("\nRectangularity\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  + coord_flip()
# Circularity
circ = ggplot(data=summ.data, aes(((depth_upper_cmbs+depth_lower_cmbs)/2), y=summ.data$Circ)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ylab("\nCircularity\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  +
scale_y_continuous(breaks = seq(0.4,0.8, by =0.1)) +
coord_flip()
# Other Datasets (If available)
# Soil color
col = ggplot(color, aes(x = depth, y = y)) +
geom_raster(aes(fill = hex_factor), hjust = 0) +
scale_fill_manual(values = color$hex)+
ylab("\nRGB\n\nColor\n") +
xlab(NULL) +
scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20)) +
scale_y_continuous(breaks = c(0,1,2)) +
theme_bw()+ theme(text = element_text(size=10),
#axis.text.x=element_text(color = "white"),
#axis.ticks.x=element_line(color = "white"),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none") +
coord_flip()
# Mean Sediment Grain Size
gs = ggplot(data=grain.size.data, aes((x =(depth_upper_cmbs+depth_lower_cmbs)/2), y=Feret_mean/1000)) +
geom_line(color = "grey50") + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank()) +
ylab("\nMean Sediment Grain\n\nDiameter (mm)\n") +
xlab(NULL) +  scale_x_reverse(minor_breaks = seq(0,120, 40),breaks = seq(0,120, 20))  +
scale_y_continuous(breaks = seq(.2,.42, by =0.1)) +
coord_flip()
# Soil Magnetism (if available)
# sm.lf = ggplot(data=sm, aes(x = (top_depth_cm+bottom_depth_cm)/2, y=Xlf)) +
#   geom_line() + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
#   ylab(expression(atop(paste("Xlf (SI)"), paste("")))) +
#   xlab(NULL) +  scale_x_reverse() + coord_flip()
#
# sm.hf = ggplot(data=sm, aes(x = (top_depth_cm+bottom_depth_cm)/2, y=Xhf)) +
#   geom_line() + theme_bw() + theme(text = element_text(size=10), axis.text.y=element_blank(), axis.ticks.y=element_blank())+
#   ylab(expression(atop(paste("Xhf (SI)"), paste("")))) +
#   xlab(NULL) +  scale_x_reverse() + coord_flip()
# Create Final Plot using cowplot::plot_grid
#final plot without title
p = plot_grid(depth, freq, area, feret, skew, AR, round, solid, rect, circ,gs, col, ncol =12, align="h", axis = 'l',rel_widths  = c(.4,1,1,1,1,1,1,1,1,1,1,.3))
# Final plot with title (if needed)
p.t  = plot_grid(title, p,   ncol = 1, rel_heights = c(0.05, 1))
# Display plot
p.t
# 4. Export data and graphs ##############################################################################################
# 4.1 Export Data
write.csv(summ.data, file = "./Compiled_Data/Son_Servera_Demo_Summarized.csv")
write.csv(Son_Servera_complete, file = "./Compiled_Data/Son_Servera_Demo_individual.csv")
# 4.2 Export Figure as 14in x 8in jpeg
jpeg("./Figures/Son_Servera_demo_plot.jpeg", width = 16, height = 10, units = 'in', res = 300)
p.t
dev.off()
# 5. Format data for the Global PaleoFire Database (paleofire.org) #######################################################
# 5.1 Format data to include depth, age, sample volume, and charcoal metrics
# Specify each column
depth.up = summ.data$depth_upper_cmbs
depth.down = summ.data$depth_lower_cmbs
age.up = NA #Include ages for each interval if age-depth model is present
age.down = NA #Include ages for each interval if age-depth model is present
vol = Sample_vol_mL
char.quant = summ.data$Count # user determines if count or area of charcoal fragments are required
# 5.2 Combine into dataframe and set column names
gcdb.formatted = data.frame(cbind(depth.up,depth.down,age.up, age.down, vol, char.quant))
colnames(gcdb.formatted) = c("DEPTH UP (cm)",	"DEPTH DOWN (cm)",	"AGE UP (cal BP)",	"AGE DOWN (cal BP)",	"VOLUME (cm3)",	"CHARCOAL QUANTITY")
# 5.3 Export dataframe to .csv
write.csv(gcdb.formatted, file = "./Compiled_Data/Son_Servera_Demo_gcdb_formatted.csv")
